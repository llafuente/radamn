Matrix save/restore explanations
Example 1:

   command                 result
glLoadMatrixf(A)       stack = [A]
glPushMatrix()         stack = [A, A]
glLoadMatrixf(B)       stack = [B, A]
glPopMatrix()          stack = [A]


Example 2:
   command                 result

glLoadMatrixf(A)       stack = [A]
glPushMatrix()         stack = [A, A]
glMultMatrixf(B)       stack = [AB, A]
glPopMatrix()          stack = [A]

----------------------------------------------------------------------------------------------------------------

extra initialize params may take a look later
    glShadeModel(GL_SMOOTH);                        // Enable Smooth Shading
    glClearColor(0.0f, 0.0f, 0.0f, 0.5f);                   // Black Background
    glClearDepth(1.0f);                         // Depth Buffer Setup
    glEnable(GL_DEPTH_TEST);                        // Enables Depth Testing
    glDepthFunc(GL_LEQUAL);                         // The Type Of Depth Testing To Do
    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);

----------------------------------------------------------------------------------------------------------------

MISC
    // in 1st row, 3 lines, each with a different stipple
    glEnable (GL_LINE_STIPPLE);
    glLineStipple (1, 0x0101); /* dotted
    drawOneLine (50.0, 125.0, 150.0, 125.0);
    glLineStipple (1, 0x00FF); /* dashed
    drawOneLine (150.0, 125.0, 250.0, 125.0);
    glLineStipple (1, 0x1C47); /* dash/dot/dash
    drawOneLine (250.0, 125.0, 350.0, 125.0);
    // in 2nd row, 3 wide lines, each with different stipple
    glLineWidth (5.0);
    glLineStipple (1, 0x0101);
    drawOneLine (50.0, 100.0, 150.0, 100.0);

    glLineStipple (1, 0x00FF);
    drawOneLine (150.0, 100.0, 250.0, 100.0);
    glLineStipple (1, 0x1C47);
    drawOneLine (250.0, 100.0, 350.0, 100.0);
    glLineWidth (1.0);
    // in 3rd row, 6 lines, with dash/dot/dash stipple,
    // as part of a single connected line strip
    glLineStipple (1, 0x1C47);
    glBegin (GL_LINE_STRIP);
    for (i = 0; i < 7; i++)
    glVertex2f (50.0 + ((GLfloat) i * 50.0), 75.0);
    glEnd ();
    // in 4th row, 6 independent lines,
    // with dash/dot/dash stipple
    for (i = 0; i < 6; i++) {
        drawOneLine (50.0 + ((GLfloat) i * 50.0),
        50.0, 50.0 + ((GLfloat)(i+1) * 50.0), 50.0);
    }
    // in 5th row, 1 line, with dash/dot/dash stipple
    // and repeat factor of 5
    glLineStipple (5, 0x1C47);
    drawOneLine (50.0, 25.0, 350.0, 25.0);
    glFlush ();

----------------------------------------------------------------------------------------------------------------

patterns
    glEnable (GL_LINE_STIPPLE);
    glPushAttrib (GL_LINE_BIT);
    glLineStipple (3, 0xAAAA);
    glPopAttrib ();

----------------------------------------------------------------------------------------------------------------

gradients
    glBegin(GL_QUADS);
    //red color
    glColor3f(1.0,0.0,0.0);
    glVertex2f(-1.0,-1.0);
    glVertex2f(1.0,-1.0);
    //blue color
    glColor3f(0.0,0.0,1.0);
    glVertex2f(1.0, 1.0);
    glVertex2f(-1.0, 1.0);
    glEnd();

----------------------------------------------------------------------------------------------------------------

Canvas - Font functions see:
useful class ? http://www.gamedev.net/topic/284259-for-reference-using-sdl_ttf-with-opengl/
extern DECLSPEC int SDLCALL TTF_SizeText(TTF_Font *font, const char *text, int *w, int *h);
extern DECLSPEC int SDLCALL TTF_SizeUTF8(TTF_Font *font, const char *text, int *w, int *h);
extern DECLSPEC int SDLCALL TTF_SizeUNICODE(TTF_Font *font, const Uint16 *text, int *w, int *h);
extern DECLSPEC SDL_Surface * SDLCALL TTF_RenderUTF8_Solid(TTF_Font *font, const char *text, SDL_Color fg);